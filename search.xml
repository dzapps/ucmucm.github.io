<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[轮盘赌博的不严谨分析]]></title>
      <url>%2F2017%2F04%2F23%2F%E8%BD%AE%E7%9B%98%E8%B5%8C%E5%8D%9A%E7%9A%84%E4%B8%8D%E4%B8%A5%E8%B0%A8%E5%88%86%E6%9E%90%2F</url>
      <content type="text"><![CDATA[今天正好跟朋友说起赌博过程中的一些事情，我说我几年前第一次去赌场的时候观察转盘，找到了一种规律然后投注赢了钱，他们说这是巧合，不存在某种规律，所以这篇文章想以不严谨的方式来论证其中的一些科学依据。 我刚高考完那年，跟我父母和他们单位的人一起去了港澳旅游，顺便也去了澳门赌场，幸好我刚满18岁一个月，当时就允许我进了赌场。揣着口袋里的150港币就去四处找可以玩的。可惜连最基本的押大小都需要200起………..所以我只能找到了50港币起的一个机器转盘游戏。 网上随便找了一个类似的图，当然在赌场倍数不一样。由图可以看出，这个游戏是轮盘赌博的一类，与正规的轮盘区别是小球改成了指针，而小球的物理滚动变成了此处指针的由于某种程序设置而转动，由此就可以排除轮盘赌博中 小球每一局由于受到不同的物理作用而产生的结果的不可测性（除非我是拉普拉斯的恶魔），指针由于非人为，必定内部存在某种程序，或者给定转盘某种（程序或非程序）的初始加速度，来完成转盘的旋转。 现在我们不管转盘的内部程序或者加速度的变化是什么，假定内部程序是不变的（有此假定是因为非人为操作，内部程序是编好的，或者除非哪个程序员脑子抽了写了一个随机函数），那么根据大数定理，当旋转次数 n→∞ 时， 意思是样本数越多，其平均就越接近期望值，意思是当n趋近于无穷时，里面任何一个数字出现的概率都将接近于一个常数，这就给了我们的推测打下了基础。而我们根本无需管程序内部是什么样的，不论10出现的概率是十分之一，五十分之一还是一百分之一，这都与我们无关，内部程序是一个黑箱，而我们只需要知道他外部输出的概率即可。 当然我们不可能看无穷个结果来推测出每一个数字出现的概率。我们只需要观察n个连续的结果，来大致推测某种概率规律。以上图的转盘为例，假设我们观察了十分钟，输出结果为 1，2，1，3，4，3，4，10，2，2，4，1，1，1.5，2，4，10，1.5，1，3，10 当然我写这个假设的输出结果没有意义，因为我们既然已经知道了上面大数定理的公式，我们就知道某个数字出现的概率是固定的，就知道当n趋近于无穷的时候，概率再小的事情也会发生（其实就是墨菲定律，这是我本科时候理解的大数定理，当然不严谨），就知道每一个数字必然会出现在某个位置（这是一句废话），然而这个必然出现就可以作为我们推理的依据。（当然数学上并不是必然出现，但这样你人品也太差了） 假设10这个数字必然会出现，假设每次出现的概率为1/50，那么当旋转次数n越大，10若没有出现在前一次，它在后一次出现的概率就会比前一次更高（这句话说的不对）。 等等，你或许要问我，这10出现的概率每一次都是1/50，而每一次转盘旋转事件若是相互独立的话，为什么概率会变？其实概率并不是变了，记得前段时间面试题和网上很火的一个问题：抛10次硬币都是正面，那第11次还出正面的概率是多少？ （转自Ent，果壳） 标准的回答是，当然还是二分之一。每次硬币是一个独立事件。硬币没有记忆，不会记得之前发生了什么事情。 “什么！可是连续11次的概率是1/2048啊？” 对，如果你站在第一次扔出来之前，那是这样。但现在已经扔了10次了。前10次扔出任何一个特定结果（比如全是正面）的概率，已经是1/1024了。接下来这一次是正面的概率还是正常的1/2，乘起来正好是1/2048。 或者你可以这么想：前方是一片分岔的小路，一共分岔了11轮，通向2048种不同的可能性。一开始，你面前的所有可能性都真的是可能的。但是你经过第一个分岔，就有1024种对你关闭了；经过第二个，又有512种关闭了……等到你已经经过第10个的时候，面前只剩下最后一个分岔的两条路。那么这两条路，对于此刻的你而言，左的概率也是1/2，右的概率也是1/2。 不然的话，假若左是1/2048，那右难道是2047/2048？如果左右平等，右也是1/2048，那剩下的2046呢？它们都在你已经不可能抵达的那些岔路上，不能计入你眼前的概率了。 “可是……连续11次正面是1/2048啊，多小的概率啊？” 走上任何一条具体的道路，都是一样的。11次随便什么结果都是1/2048，你总得选一个。 “可是，这是连续11次正面啊，不是‘随便什么结果’啊。” 好吧，这就是症结所在：虽然任何特定结果都是等概率的，但是不同的结果有不同的模式。连续11次正面，这个模式在直觉上是不对劲的，而譬如说5正6反这个模式在直觉上没有问题。因为直觉的不对劲，让我们难以老老实实接受1/2这个结果。 那就是直觉错了呗？ 也不一定——如果你是个贝叶斯主义者的话。 —————————————— 回到一开头。以上全部计算都依赖于一个前提：这是一枚“标准硬币”，它没有记忆，正反概率都是1/2。 等等，你是怎么知道的？ 哦，题干里写的。出题人说了是这样，那就是这样呗。 在这个狭小的场景里，这就是一条先验知识。它是“先于经验”而存在的，你并非通过亲身经历而获知它是标准硬币，而是通过出题人（或者上帝或者先天知识或者纯推理或者别的什么奇怪的来源）获得的。如果你相信先验知识的话，那就照办吧。 但是并没有人规定你一定要相信先验知识（虽然在做题的时候，不相信出题人的后果会很惨咯）。如果我不信呢？至少，我觉得我可以用我的观察去修正它呢？ 那我就是在用后验知识了。换句话说，贝叶斯。 在这个案例里，我已经见到了连续10次正面。当然，一个标准硬币可以产出这样的结果，只不过概率是1/1024而已。但是，有另外一种可能的解释，那就是这个硬币作弊了。或者它的两面都是正面，或者它的正面那边比反面那边重很多。如果它是一枚作弊的、必定正面的硬币，那么它就会以1的概率出产连续10正，这可比标准硬币更有解释力啊！ 那么在这里我们可以说，这10次观察得到了一个后验知识——该硬币有偏向于正面的倾向性。这倾向性有多大？可以算但是很麻烦，这里暂且忽略。但无论如何，如果你是一个贝叶斯主义者，相信直觉，不愿意接受“标准硬币”那个先验知识，那么你应当得出的结论是：下一次硬币为正面的概率大于1/2. 对，是大于。这才是直觉的正确用法。无论你是哪一派的，都不会得出小于1/2的结果。 上面的问题与这个问题无关………但我觉得概率的思想是一样的。 所以如果连续n次转盘都不出现10，那么概率为49/50的n次方，随着n的增大而这个概率在变小，所以说明并不是10出现的概率变大，而是连续不出现10的概率在变小。所以我们就可以适当进行观察，以上面的观察为例，第一次出现10是在第8位，第二次出现10是在第9位，第三次出现10是在第4位。要知道10作为最大的数字，只要赌场的程序员不蠢想赚钱，那么它出现的概率应该是最小的。则在10没有出现的连续序列之后，10出现的概率增大（某种算法的结果）到某一个值之后，假设是1/4，那么下一次出现10的概率会增大到1/4而不是之前的1/50，而在某个临界概率之后，投注10中奖的概率会大大增多。 这个临界概率当然不能算出来，而是通过观察自己大致猜一下。比如上面的序列，我可以猜测在第5个数字之后，10出现的概率能达到我的预期，则我开始投注。或者说你想保守一点，在第6或者第7个数字之后再投注。压地越早，则后续可能出现10的范围越大（极限地想，比如你第一次就开始压10，直到10出现为止）。而压地越晚，即使你后期出现10概率会变大，但指不定10会出现的预期之前（比如你想从1/2左右的概率开始压10，但10出现在了1/4概率的位置），那么又得重新计算。 因此，只要你在合适的位置（合适的概率之后）进行投注，那么理论上，在某个区间之内，必然会出现你所投注的倍数。 毕竟五年过去了，已经找不到当年我记录那转盘的记录了，但我记得当年转盘上最大的数字是50，50毕竟出现的概率太小了，我不知道要等多久才能算出个规律来，所以我记的是12这个倍数。我当时站着看了十几分钟那个转盘，在手机上记下来每一次转出来的数字，记下了12出现的位置和大致的间隔。然后在我大概觉得规律估摸差不多的时候，把我仅有的150块钱拿出50块（坑爹啊，最低投注50，老子可没有身家几千万来玩这个），投在了我觉得可能的出现的时候，然后…………….并没有出现12，so sad，然后我接着下一个又来了一次………然后中了，走了，见好就收。 话说当时的我肯定不会有现在的我想这么多原理，只是觉得可能有这么一种方式可以推出一定的规律。但以上推论说是不严谨，原因之处在于，第一，假定内部程序是个黑箱的稳定函数，即使你把12和50的概率设置再低也无所谓，除非真是脑子进水了，设置的概率是个随机数……..第二是理论归理论，即使连续不出现50的概率在变小，但还是有概率它不会出现，甚至有可能从赌场开业转盘开转，到宇宙寂灭，都不会转出来50………比如概率为0的事情也是有可能发生的……..所以你可能觉得50已经过了50个数字没出现了，然后觉得你发家致富的机会来了，一连投了1000000次都没出现50………….这就是你人品的问题了。 一直幻想着，哪天我本金足够了，不怕用本金来烧概率的时候，就去压50的，毕竟一次就赢2500，算下来我只要误差范围在50次以内，甚至只要赢的时候与50剩余的次数的差，与50次多出来的次数的差是正数，理论上我就能有无限的稳定收入………… 也就是想想而已。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Static静态方法与面向对象]]></title>
      <url>%2F2017%2F04%2F20%2FStatic%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%2F</url>
      <content type="text"><![CDATA[With the this keyword in mind, you can more fully understand what it means to make amethod static. It means that there is no this for that particular method. You cannot call non-static methods from inside static methods [^The one case in which this is possible occurs if you pass a reference to an object into the static method (the static method could also create its own object). Then, via the reference (which is now effectively this), you can call non-static methods and access non-static fields. But typically, if you want to do something like this, you’ll just make an ordinary, non-static method.]: (although the reverse is possible), and you can call a static method for the class itself, without any object. In fact, that’s primarily what a static method is for. It’s as if you’re creating the equivalent of a global method. However,global methods are not permitted in Java, and putting the static method inside a class allowsit access to other static methods and to static fields. Some people argue that static methods are not object-oriented, since they do have the semantics of a global method; with a static method, you don’t send a message to an object, since there’s no this. This is probably a fair argument, and if you find yourself using a lot of static methods, you should probably rethink your strategy. However, statics are pragmatic,and there are times when you genuinely need them, so whether or not they are “proper OOP” should be left to the theoreticians.]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java排序算法总结]]></title>
      <url>%2F2017%2F04%2F20%2FJava%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%2F</url>
      <content type="text"><![CDATA[先定义一些排序算法通用的API 123456789101112131415161718192021222324252627282930313233343536public class Sort&#123; public static void sort(Comparable[] a)&#123; // 新建排序算法对象 Quick quick = new Quick(); quick.sort(a); &#125; protected static boolean less(Comparable v, Comparable w)&#123; return (v.compareTo(w) &lt; 0); &#125; protected static void exc (Comparable[] a, int i, int j)&#123; Comparable t = a[i]; a[i] = a[j]; a[j] = t; &#125; protected static void show(Comparable[] a)&#123; for (int i =0; i&lt;a.length; i++) System.out.print(a[i] + &quot; &quot;); System.out.println(); &#125; protected static boolean isSorted(Comparable[] a)&#123; for (int i=0; i&lt;a.length; i++) if (less(a[i], a[i+1])) return false; return true; &#125; public static void main(String[] args)&#123; Comparable[] a = &#123;&apos;A&apos;,&apos;R&apos;,&apos;E&apos;,&apos;U&apos;,&apos;K&apos;,&apos;I&apos;,&apos;D&apos;,&apos;D&apos;,&apos;I&apos;,&apos;N&apos;,&apos;G&apos;,&apos;M&apos;,&apos;E&apos;&#125;; sort(a); assert isSorted(a); show(a); &#125;&#125; 插入排序 / Insertion Sort 123456789public class Insertion extends Sort&#123; public static void sort(Comparable[] a)&#123; int N = a.length; for (int i=0; i&lt;N; i++)&#123; for (int j = i; j&gt;0 &amp;&amp; less(a[j],a[j-1]); j--) exc(a,j,j-1); &#125; &#125;&#125; 选择排序 / Selection Sort 123456789101112public class Selection extends Sort&#123; public static void sort(Comparable[] a)&#123; int N = a.length; for (int i=0; i&lt;N; i++)&#123; int min = i; for (int j=i+1; j&lt;N; j++)&#123; if (less(a[j],a[min])) min = j; &#125; exc(a,i,min); &#125; &#125;&#125; 希尔排序 / Shell Sort 1234567891011121314public class Shell extends Sort&#123; public static void sort(Comparable[] a)&#123; int N = a.length(); int h = 1; while (h &lt; N/3) (h = 3*h + 1); while (h &gt;= 1)&#123; for (int i=h; i&lt;N; i++)&#123; for (int j=i; j&gt;=h &amp;&amp; less(a[j],a[j-h]); j-=h) exc(a,j,j-h); &#125; h = h/3; &#125; &#125;&#125; 归并排序 / Merge Sort 1234567891011121314151617181920212223242526272829public class Merge extends Sort&#123; private static Comparable[] aux; public static void sort(Comparable[] a)&#123; aux = new Comparable[a.length]; sort(a,0,a.length-1); &#125; public static void sort(Comparable[] a, int lo, int hi)&#123; if (hi&lt;=lo) return; int mid = lo + (hi-lo)/2; sort(a,lo,mid); sort(a,mid,hi); Merge(a,lo,mid,hi); &#125; public static void Merge(Comparable[] a, int lo, int mid, int hi)&#123; int i = lo; int j = mid + 1; for (int k=lo; k&lt;=hi; k++) aux[k] = a[k]; for (int k=lo; k&lt;=hi; k++)&#123; if (i&gt;mid) a[k] = aux[j++]; else if (j&gt;hi) a[k] = aux[i++]; else if (less(aux[i],aux[j])) a[k] = aux[i++]; else a[k] = a[j++]; &#125; &#125; &#125; 快速排序 / Quick Sort 12345678910111213141516171819202122232425262728public class Quick extends Sort&#123; public static void sort(Comparable[] a)&#123; StdRandom.shuffle(a); sort(a, 0, a.length); &#125; public static void sort(Comparable[] a, int lo, int hi)&#123; if (hi&lt;=lo) return; int j = partition(a,lo,hi); sort(a,lo,j-1); sort(a,j+1,hi); &#125; public static int partition(Comparable[] a, int lo, int hi)&#123; int i = lo; int j = hi+1; Comparable v = a[lo]; while (true)&#123; while (less(a[++i],v)) if (i == hi) break; while (less(v,a[--j])) if (j == lo) break; if (i &gt;= j) break; exc(a,i,j); &#125; // 跟 j 交换位置，因为 i 此时位置在 a[i] &gt; v 处而 a[j] &lt; v exc (a,lo,j); return j; &#125;&#125; 三向切分快速排序 / Quick 3 Ways 1234567891011121314151617public class Quick3Way extends Quick&#123; public static void sort(Comparable[] a, int lo, int hi)&#123; if (lo&gt;=hi) return; int i = lo+1; int gt = hi; int lt = lo; Comparable v = a[lo]; while ( i &lt;= gt )&#123; int cm = v.compareTo(a[i]); if (cm &gt; 0) exc(a,i,gt--); else if (cm &lt; 0) exc(a,lt++,i++); else i++; &#125; sort(a,lo,lt-1); sort(a,gt+1,hi); &#125;&#125; 堆排 / StackSort 数组最大堆： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758public class MaxPQ&lt;Key extends Comparable&lt;Key&gt;&gt; &#123; private Key[] pq; private N = 0; public boolean less(int i, int j)&#123; return pq[i].compareTo(pq[j]) &lt; 0; &#125; public void exc(int i, int j)&#123; Key temp; temp = pq[i]; pq[i] = pq[j]; pq[j] = temp; &#125; public void swin(int k)&#123; while (k&gt;1 &amp;&amp; less(k/2,k))&#123; exc(k/2,k); k /= 2; &#125; &#125; public void sink(int k)&#123; while (2*k &lt;= N)&#123; int j = 2*k; if (j&lt;N &amp;&amp; less(2*k, 2*k+1)) j++; if (!less(k,j)) break; exc(k,j); k = j; &#125; &#125; public MaxPQ (int maxN)&#123; pq = (Key[]) new Comparable[maxN+1]; &#125; public boolean isEmpty()&#123; return N==0; &#125; public void insert(Key v)&#123; pq[++N] = v; swin(N); &#125; public int size()&#123; return N; &#125; public Key delMax()&#123; Key max = pq[1]; exc(N--,1); pq[N+1] = null; sink(1); return max; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738public class StackSort&#123; private Comparable[] a; private int N = a.length; public void StackSort(int max)&#123; a = new Comparable[max]; &#125; public void sort(Comparable[] a)&#123; for (int k = a.length/2; k&gt;=1; k--) sink(k); while (N&gt;1)&#123; exc(N--,1); sink(N); &#125; &#125; public boolean less(int i, int j)&#123; return a[i].compareTo(j) &lt; 0; &#125; piublic void sink(int k)&#123; while (2*k &lt;= a.length)&#123; int j = 2*k; if (less(j,j+1)) j++; if (!less(k,j)) break; exc(k,j); k = j; &#125; &#125; public void exc(int i, int j)&#123; Comparable t = a[i]; a[i] = a[j]; a[j] = t; &#125;&#125; 就这么多吧。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Difference between Constructor and void method in Java]]></title>
      <url>%2F2017%2F04%2F17%2FDifference-between-Constructor-and-void-method-in-Java%2F</url>
      <content type="text"><![CDATA[The constructor is an unusual type of method because it has no return value. This is distinctly different from a void return value, in which the method returns nothing but you still have option to make it return something else. Constructors return nothing and you don’t have an option (the new expression does return a reference to the newly created object, but the constructor itself has no return value). 构造器是一种特殊的Method，因为它没有返回值，这个跟void空返回值有很大的区别。因为即使void method本身不会返回什么，你依旧可以让它返回一些东西。构造器不会返回任何东西，你也没有任何选择让它返回什么东西。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Java运算符小记]]></title>
      <url>%2F2017%2F04%2F16%2FJava%E8%BF%90%E7%AE%97%E7%AC%A6%E5%B0%8F%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[Java运算符记录本，以此记下容易出错的地方。 来自于 Thinking in Java Relational OperatorsThe relational operators == and != also work with all objects. Here is an example: 12345678910111213public class Equivalence&#123; public static void main (String[] args)&#123; Integer n1 = new Integer(47); Integer n2 = new Integer(47); System.out.println(n1 == n2); System.out.println(n1 != n2); &#125;&#125;/* Output:falsetrue*/ The statement System.out.println(n1==n2) will print the result of the boolean comparison within it. While the contents of the objects are the same, the references are not the same. The operators == and != compare object references, so the output is actually “false” and then “true”. What if we want to compare the actual contents of an object for equivalences? We must use the special method equals() that exits for all objects (not primitives, which work fine with == and !=). Example: 123456789public class EqualsMethod&#123; public static void main(String[] args)&#123; Integer n1 = new Integer(47); Integer n2 = new Integer(47); System.out.printly(n1.equals(n2)); &#125;&#125;/* Output: true */ But default equals() does not compare contents. Here is an example: 12345678910111213class Value&#123; int i;&#125;public class EqualsMethod2&#123; public static void main(String[] args)&#123; Value v1 = new Value(); Value v2 = new Value(); v1.i = v2.i = 100; System.out.println(v1.equals(v2)); &#125;&#125;/* Output: false */ The result is false. This is because the default behavior of equals() is to compare references. So unless you override equals() in your new class you won’t get the desired behavior. Most of the Java library classes implement equals() so that it compares the contents of objects instead of their references. Bitwise OperatorsThe bitwise operators allow you to manipulate individual bits in an integral primitive data type. Bitwise operators perform Boolean algebra on the corresponding bits in the two arguments to produce the result. The bitwise operators come from C’s low-level orientation, where you often manipulate hardware directly and must set the bits in hardware registers. Java was originally designed to be embedded in TV set-top boxes, so this low-level orientation still made sense. The bitwise AND operator (&amp;) produces a one in the output bit if both input bits are one; otherwise, it produces a zero. 12345678910111213// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 129; int b = 128; System.out.println(a&amp;b); &#125;&#125;/* Output: 128;Integer.toBinaryString(a) is 10000001;Integer.toBinaryString(b) is 10000000;Integer.toBinaryString(a&amp;b) is 10000000; */ The bitwise OR operator (|) produces a one in the output bit if either input is a one and produces a zero only if both input bits are zero. 12345678910111213// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 129; int b = 128; System.out.println(a|b); &#125;&#125;/* Output: 129;Integer.toBinaryString(a) is 10000001;Integer.toBinaryString(b) is 10000000;Integer.toBinaryString(a|b) is 10000001; */ The bitwise EXCLUSIVE OR, or XOR (^) , produces a one in the output bit if one or the other input bit is a one, but not both, which means if the bits are same, producing 0, if the bits are different, producing 1. 12345678910111213// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 15; int b = 2; System.out.println(a^b); &#125;&#125;/* Output: 13;Integer.toBinaryString(a) is 1111;Integer.toBinaryString(b) is 0010;Integer.toBinaryString(a^b) is 1101; */ The bitwise NOT, also called the ones complement operator, (~), is a unary operator; it takes only one argument. (All other bitwise operators are binary operators.) Bitwise NOT produces the opposite of the input bit - a one if the input bit is zero, a zero if the input bit is one. 12345678910// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 2; System.out.println(~a); &#125;&#125;/* Output: -3;Integer.toBinaryString(a) is 10;Integer.toBinaryString(~a) is 1111 1111 1111 1111 1111 1111 1111 1101; */]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[A Review of Sugar Factory]]></title>
      <url>%2F2017%2F04%2F15%2FA-Review-of-Sugar-Factory%2F</url>
      <content type="text"><![CDATA[无比气愤，好端端一顿饭吃成这样。 故写此评论，发在了Yelp上，同时在此博客上记录下来。 It was a really HORRIBLE EXPERIENCE today. I would never be here again and never recommend my friends this restaurant ever. The service here is the WORST, WORST, WORST I have ever been through. When my girl friend and I sat down, the waiter (Just call her “Ellen”) came to us and said what drinks would we want. After we ordered the drinks, she just walked away without saying anything. We haven’t even ordered food. So we told her that we wanted to order food. After then, we wanted some alcohol, so we raised our hand and wanted to order more. She saw it, and said impatiently: “Do not do that again.” WHAT ARE YOU F**KING KIDDING ME??? We were customers and we wanted to order some drinks, and this was what a waiter said to us?? Okay, then LET’S SEE WHAT THEIR MANAGERS DID. I went and told their woman manager that what the waiter said to us. She said she would talk to us later. 10 minutes later, NOTHING HAPPENED. I went and asked her again that we needed an explanation and sorry. She said okay she would deal with this. Of course, NOTHING HAPPENED EITHER. Then I went for her third times, finally another one came and asked us what happened, then she seemed to talk to “Ellen”. As expected, NOTHING HAPPENED. Until we were going to leave, a man who seems to be another manger, called C. K., said a lot high-sounding words without any sincerity. THOSE WORDS WERE ALL BULLSHIT. We DIDN’T HEAR SORRY from “Ellen” and DIDN’T FEEL ANY APOLOGIES from their managers. They just wanted us leave. They didn’t even care about this. They have too many customers, so they can make too much money from customers. They don’t even care what happened to the customers. She was rude to us, so why should we show respect to her? The managers didn’t care about our customers, so WHY SHOULD WE CUSTOMERS BE DESPISED EVEN WE GIVING MONEY TO THEM?? I should read the reviews from the Yelp before I went there. Someone also mentioned that how rude the waiters were. More customers went there, the feelings and reviews of customers would become much cheaper. Just look at their attitudes to customers. They might be proud of this attitude because they beat the customers again. 真他妈气，一天心情都不好。]]></content>
    </entry>

    
  
  
</search>
