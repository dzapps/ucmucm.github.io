<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Java运算符小记]]></title>
      <url>%2F2017%2F04%2F16%2FJava%E8%BF%90%E7%AE%97%E7%AC%A6%E5%B0%8F%E8%AE%B0%2F</url>
      <content type="text"><![CDATA[Java运算符记录本，以此记下容易出错的地方。 来自于 Thinking in Java Relational OperatorsThe relational operators == and != also work with all objects. Here is an example: 12345678910111213public class Equivalence&#123; public static void main (String[] args)&#123; Integer n1 = new Integer(47); Integer n2 = new Integer(47); System.out.println(n1 == n2); System.out.println(n1 != n2); &#125;&#125;/* Output:falsetrue*/ The statement System.out.println(n1==n2) will print the result of the boolean comparison within it. While the contents of the objects are the same, the references are not the same. The operators == and != compare object references, so the output is actually “false” and then “true”. What if we want to compare the actual contents of an object for equivalences? We must use the special method equals() that exits for all objects (not primitives, which work fine with == and !=). Example: 123456789public class EqualsMethod&#123; public static void main(String[] args)&#123; Integer n1 = new Integer(47); Integer n2 = new Integer(47); System.out.printly(n1.equals(n2)); &#125;&#125;/* Output: true */ But default equals() does not compare contents. Here is an example: 12345678910111213class Value&#123; int i;&#125;public class EqualsMethod2&#123; public static void main(String[] args)&#123; Value v1 = new Value(); Value v2 = new Value(); v1.i = v2.i = 100; System.out.println(v1.equals(v2)); &#125;&#125;/* Output: false */ The result is false. This is because the default behavior of equals() is to compare references. So unless you override equals() in your new class you won’t get the desired behavior. Most of the Java library classes implement equals() so that it compares the contents of objects instead of their references. Bitwise OperatorsThe bitwise operators allow you to manipulate individual bits in an integral primitive data type. Bitwise operators perform Boolean algebra on the corresponding bits in the two arguments to produce the result. The bitwise operators come from C’s low-level orientation, where you often manipulate hardware directly and must set the bits in hardware registers. Java was originally designed to be embedded in TV set-top boxes, so this low-level orientation still made sense. The bitwise AND operator (&amp;) produces a one in the output bit if both input bits are one; otherwise, it produces a zero. 12345678910111213// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 129; int b = 128; System.out.println(a&amp;b); &#125;&#125;/* Output: 128;Integer.toBinaryString(a) is 10000001;Integer.toBinaryString(b) is 10000000;Integer.toBinaryString(a&amp;b) is 10000000; */ The bitwise OR operator (|) produces a one in the output bit if either input is a one and produces a zero only if both input bits are zero. 12345678910111213// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 129; int b = 128; System.out.println(a|b); &#125;&#125;/* Output: 129;Integer.toBinaryString(a) is 10000001;Integer.toBinaryString(b) is 10000000;Integer.toBinaryString(a|b) is 10000001; */ The bitwise EXCLUSIVE OR, or XOR (^) , produces a one in the output bit if one or the other input bit is a one, but not both, which means if the bits are same, producing 0, if the bits are different, producing 1. 12345678910111213// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 15; int b = 2; System.out.println(a^b); &#125;&#125;/* Output: 13;Integer.toBinaryString(a) is 1111;Integer.toBinaryString(b) is 0010;Integer.toBinaryString(a^b) is 1101; */ The bitwise NOT, also called the ones complement operator, (~), is a unary operator; it takes only one argument. (All other bitwise operators are binary operators.) Bitwise NOT produces the opposite of the input bit - a one if the input bit is zero, a zero if the input bit is one. 12345678910// Exampleclass Bitwise&#123; public static void main(String[] args)&#123; int a = 2; System.out.println(~a); &#125;&#125;/* Output: -3;Integer.toBinaryString(a) is 10;Integer.toBinaryString(~a) is 1111 1111 1111 1111 1111 1111 1111 1101; */]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[A Review of Sugar Factory]]></title>
      <url>%2F2017%2F04%2F15%2FA-Review-of-Sugar-Factory%2F</url>
      <content type="text"><![CDATA[无比气愤，好端端一顿饭吃成这样。 故写此评论，发在了Yelp上，同时在此博客上记录下来。 It was a really HORRIBLE EXPERIENCE today. I would never be here again and never recommend my friends this restaurant ever. The service here is the WORST, WORST, WORST I have ever been through. When my girl friend and I sat down, the waiter (Just call her “Ellen”) came to us and said what drinks would we want. After we ordered the drinks, she just walked away without saying anything. We haven’t even ordered food. So we told her that we wanted to order food. After then, we wanted some alcohol, so we raised our hand and wanted to order more. She saw it, and said impatiently: “Do not do that again.” WHAT ARE YOU F**KING KIDDING ME??? We were customers and we wanted to order some drinks, and this was what a waiter said to us?? Okay, then LET’S SEE WHAT THEIR MANAGERS DID. I went and told their woman manager that what the waiter said to us. She said she would talk to us later. 10 minutes later, NOTHING HAPPENED. I went and asked her again that we needed an explanation and sorry. She said okay she would deal with this. Of course, NOTHING HAPPENED EITHER. Then I went for her third times, finally another one came and asked us what happened, then she seemed to talk to “Ellen”. As expected, NOTHING HAPPENED. Until we were going to leave, a man who seems to be another manger, called C. K., said a lot high-sounding words without any sincerity. THOSE WORDS WERE ALL BULLSHIT. We DIDN’T HEAR SORRY from “Ellen” and DIDN’T FEEL ANY APOLOGIES from their managers. They just wanted us leave. They didn’t even care about this. They have too many customers, so they can make too much money from customers. They don’t even care what happened to the customers. She was rude to us, so why should we show respect to her? The managers didn’t care about our customers, so WHY SHOULD WE CUSTOMERS BE DESPISED EVEN WE GIVING MONEY TO THEM?? I should read the reviews from the Yelp before I went there. Someone also mentioned that how rude the waiters were. More customers went there, the feelings and reviews of customers would become much cheaper. Just look at their attitudes to customers. They might be proud of this attitude because they beat the customers again. 真他妈气，一天心情都不好。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[莫欺少年穷]]></title>
      <url>%2F2017%2F04%2F13%2F%E8%8E%AB%E6%AC%BA%E5%B0%91%E5%B9%B4%E7%A9%B7%2F</url>
      <content type="text"><![CDATA[一年多以前，我第一次购买了自己的域名，”www.ucmucm.cn”，并且用WordPress搭建了第一个我自己的博客。然而因为当时各种原因没有继续维护下去，导致这个网站荒废了，直至今年到期。到期的时候想了许久，决定不续费了，主要是想换一个域名，再加上有自己学校的blog，所以暂缓了自己建站的想法。 前两天某公司的面试却使我改变了想法。前两天晚上，我为了面试专门预定了学校图书馆的某一个小讨论室，也准备了一些基础的技术问题。即使知道自己的知识还差很多，但还是想抱着试试的心态，毕竟也是个机会。然而面试的时候某一位面试官问我是否接触过编程需要中文的情况，我实话实说我没有，我说我现在在全英文环境下，并没有接触中文的需要。事实其实就是这样，然而其中一位面试官就此笑得很开心，即使他忍住在不出声，其实我还是听见了。我知道自己在某些基础问题答得不好，自己都觉得脸红，我自己也做好了面试的心理准备，不会就是不会，我不会在网上查到很多问答资料然后假装自己会来回答，我对自己现在的水平有清楚的认知。然而我却还是玻璃心了这次。 回去之后左思右想，还是决定给他们HR发一封邮件，并希望HR能转达我的一些话。 两位面试官您们好，虽然我不知道您们在面试后对我有什么想法，可能知道不出彩也没什么深刻记忆，可能觉得我作为一名硕士研究生知识水平很水，从而对某一类人产生某种看法。但其实就我自己来说，面试很多问题我自己都ashamed of myself，很多基础知识都能反映出我自己不足，但同时更能督促我自己有太多不会的东西，而更加想去学习。我清楚自己水平差很多，毕竟今年才转专业，才真正有时间系统地学习CS，短时间内能学习的有限，但我相信凭借我对这行业的喜爱，三次去找Advisor申请转专业，同时能在非考试目的下自发乐于学习新知识，加上我自己的学习能力，相信自己能在短时间内赶上达到甚至超过很多现有程序员。就像我跟您们说我想当一个全栈工程师，不光为了赚钱生存，更是因为是一个目标，是一个理想，因为热爱。所以其实我想代表如我这样知识可能暂时不够，但依旧努力的一些学生，或者我不能代表，那我就代表我自己，想说一些话。 即使我知道自己欠缺的很多，但我希望您们不要否认或者轻看和我一样热爱这行业而努力的人。申请实习生的原因也很简单，即使知道自己某些基础知识欠缺，并不是因为不认清自己的能力而夜郎自大，反而是知道自己有太多的不足，想让自己抓住任何一个可能的机会去提升自己。您们是经验丰富的程序员，相信你们也知道技术的道路广而深，同样正是因为技术的开放性，才会有很多如我这样的人，半途中凭借一腔热血而投入其中，而无悔。相信您们在工作中也是乐于帮助新来的实习生和刚毕业的新人，同样我也希望您们能对即使不满足要求的，但依旧努力的学生们给予支持。因为成为一名出色的软件工程师是您们所追求的，同时也是我等刚入门的新人的目标，而您们是前辈，我们则是正在路上披荆斩棘。 总结下来或许正是五个字： 莫欺少年穷 其实我知道是自己玻璃心，其实我甚至也清楚对方并不是故意的，而对方也很友好给我解释很多我不会的东西，但我还是发了这封邮件。或许说这封邮件发给的不是面试官，而是我自己。 这是我发给自己的决心和战书。 自己费尽千辛万苦转到这个行业是为了什么？自己凭什么相信自己能坚持能做好？自己凭什么能追上跟别人相比落下了四年的时光？ 或许是因为热爱吧。 Engineer向来都是创造家，不光是自己之前的行业，Civil Engineer，建造出高楼桥梁，还是我正在路上的Software Engineer，乃至任何行业的Engineer，都是改变人类生活方式的Engineer，都是创造价值，创造未来的人。未来是数字信息化时代，而Software Engineer正是创造未来世界的God。 这也正是我所痴迷的。 正是因为这一次面试想了如此之多，甚至又一次坚定了自己的决心和信念，才决定真正创建一个属于自己的网站和博客，真正记录下自己的一切学习过程，也是给自己学习的动力。 十年后的自己，2027年的我，你再看到这篇文章，你能感受到我现在，此时此刻的决心吗，而你，又过着怎么样的生活呢？]]></content>
    </entry>

    
  
  
</search>
